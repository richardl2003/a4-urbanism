@startuml

skin rose

title Visualizer - Class Diagram


class Main {
  +void main()
  -parseArgs(String[], Options, Map<String, String>): void
}

class GraphicRenderer {
  -debug: boolean
  -THICKNESS: int
  +turnOnDebug(): void
  +turnOffDebug(): void
  +render(Mesh.Mesh, Graphics2D): void
  -visualizeSegments(Mesh.Mesh, Graphics2D, List<Vertex>): void
  -visualizeVertices(Mesh.Mesh, Graphics2D): void
  -visualizePolygon(Mesh.Mesh, Graphics2D, List<Vertex>, List<Segment>): void
  -visualizePolygonNeighbours(Mesh.Mesh, Graphics2D, List<Vertex>, List<Segment>): void
  -updateCoordsForPolygons(List<Vertex>, List<Segment> List<Integer>, int[], int[]): void
  -extractColor(List<Property>): Color
  -extractSegmentThickness(List<Property>): Float
  -isCentroid(List<Property>): boolean
  -extractVertexThickness(List<Property>): Float
  -extractPolygonThickness(List<Property>): Float
}
class MeshDump {
  +dump(String): void
  +dump(Mesh.Mesh): void
}
class SVGCanvas {
  +build(int, int): Graphics2D
  +write(Graphics2D, String): void
}

Main ..> GraphicRenderer
Main ..> Structs.Mesh.Mesh
Main ..> MeshDump
Main ..> SVGCanvas
GraphicRenderer ..> Structs.Mesh.Mesh
GraphicRenderer ..> Graphics2D
GraphicRenderer ..> Structs.Vertex
GraphicRenderer ..> Structs.Segment
GraphicRenderer ..> Structs.Polygon
GraphicRenderer ..> Structs.Property
SVGCanvas ..> Graphics2D
MeshDump ..> Structs.Mesh.Mesh


@enduml